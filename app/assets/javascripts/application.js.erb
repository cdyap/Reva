// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require jquery-ui
//= require autocomplete-rails
//= require materialize-sprockets
//= require turbolinks
//= require_tree .

$(document).ready(function(){
	//change SVG icons to CSS-editable stuff. 
	//Taken from http://stackoverflow.com/questions/11978995/how-to-change-color-of-svg-image-using-css-jquery-svg-image-replacement
	$('img.svg').each(function(){
		var $img = jQuery(this);
		var imgID = $img.attr('id');
		var imgClass = $img.attr('class');
		var imgURL = $img.attr('src');

		jQuery.get(imgURL, function(data) {
		    // Get the SVG tag, ignore the rest
		    var $svg = jQuery(data).find('svg');

		    // Add replaced image's ID to the new SVG
		    if(typeof imgID !== 'undefined') {
		        $svg = $svg.attr('id', imgID);
		    }
		    // Add replaced image's classes to the new SVG
		    if(typeof imgClass !== 'undefined') {
		        $svg = $svg.attr('class', imgClass+' replaced-svg');
		    }

		    // Remove any invalid XML tags as per http://validator.w3.org
		    $svg = $svg.removeAttr('xmlns:a');

		    // Replace image with new SVG
		    $img.replaceWith($svg);

		}, 'xml');
	});
	
	$('#add-dailycount').click(function(){
		if (!($(this).hasClass("disabled"))){
			building = parseInt($('#buildings').val());
			//totalPens = SELECT building_number FROM pens WHERE building_number ==building;
			for (x = 0; x < totalPens; x++) {
				$('#add-pig').click();	
			}
			// var pigNums = 1;
			// var maleCounter = 1;
			// $('.nested-fields').each(function(){
			// 	$(this).find('#pig-num').text("Pig " + pigNums++ + ":");
			// 	if (maleCounter <= parseInt($('#male-piglets').val())) {
			// 		$(this).find('select').val("M");
			// 		maleCounter++;
			// 	} else {
			// 		$(this).find('select').val("F");
			// 	}
			// });
			$('select').material_select();
		}
		$(this).addClass('disabled');
		$('#submit-litter').attr("disabled", false);
	});
	$('#add-litter-form').on('cocoon:before-insert', function(e,pig_to_be_added) {
	    pig_to_be_added.fadeIn('slow');
	})
	.on('cocoon:after-insert', function(e, added_pig) {
	 	$('select').material_select();
	})
	.on('cocoon:before-remove', function(e, pig) {
		$(this).data('remove-timeout', 1000);
		pig.fadeOut('slow');
	});

	//http://www.kunalbabre.com/projects/table2CSV.js
	jQuery.fn.table2CSV = function(options) {
	    var options = jQuery.extend({
	        separator: ',',
	        header: [],
	        delivery: 'popup' // popup, value
	    },
	    options);

	    var csvData = [];
	    var headerArr = [];
	    var el = this;

	    //header
	    var numCols = options.header.length;
	    var tmpRow = []; // construct header avalible array

	    if (numCols > 0) {
	        for (var i = 0; i < numCols; i++) {
	            tmpRow[tmpRow.length] = formatData(options.header[i]);
	        }
	    } else {
	        $(el).filter(':visible').find('th').each(function() {
	            if ($(this).css('display') != 'none') tmpRow[tmpRow.length] = formatData($(this).html());
	        });
	    }

	    row2CSV(tmpRow);

	    // actual data
	    $(el).find('tr').each(function() {
	        var tmpRow = [];
	        $(this).filter(':visible').find('td').each(function() {
	            if ($(this).css('display') != 'none') tmpRow[tmpRow.length] = formatData($(this).html());
	        });
	        row2CSV(tmpRow);
	    });
	    if (options.delivery == 'popup') {
	        var mydata = csvData.join('\n');
	        return popup(mydata);
	    } else {
	        var mydata = csvData.join('\n');
	        return mydata;
	    }

	    function row2CSV(tmpRow) {
	        var tmp = tmpRow.join('') // to remove any blank rows
	        // alert(tmp);
	        if (tmpRow.length > 0 && tmp != '') {
	            var mystr = tmpRow.join(options.separator);
	            csvData[csvData.length] = mystr;
	        }
	    }
	    function formatData(input) {
	        // replace " with â€œ
	        var regexp = new RegExp(/["]/g);
	        var output = input.replace(regexp, "â€œ");
	        //HTML
	        var regexp = new RegExp(/\<[^\<]+\>/g);
	        var output = output.replace(regexp, "");
	        if (output == "") return '';
	        return '"' + output + '"';
	    }
	    function popup(data) {
	        var generator = window.open('', 'csv', 'height=400,width=600');
	        generator.document.write('<html><head><title>CSV</title>');
	        generator.document.write('</head><body >');
	        generator.document.write('<textArea cols=70 rows=15 wrap="off" >');
	        generator.document.write(data);
	        generator.document.write('</textArea>');
	        generator.document.write('</body></html>');
	        generator.document.close();
	        return true;
	    }
	};

	//http://stackoverflow.com/questions/16376161/javascript-set-file-in-download
	function download(strData, strFileName, strMimeType) {
	    var D = document,
	        a = D.createElement("a");
	        strMimeType= strMimeType || "application/octet-stream";


	    if (navigator.msSaveBlob) { // IE10
	        return navigator.msSaveBlob(new Blob([strData], {type: strMimeType}), strFileName);
	    } /* end if(navigator.msSaveBlob) */


	    if ('download' in a) { //html5 A[download]
	        a.href = "data:" + strMimeType + "," + encodeURIComponent(strData);
	        a.setAttribute("download", strFileName);
	        a.innerHTML = "downloading...";
	        D.body.appendChild(a);
	        setTimeout(function() {
	            a.click();
	            D.body.removeChild(a);
	        }, 66);
	        return true;
	    } /* end if('download' in a) */


	    //do iframe dataURL download (old ch+FF):
	    var f = D.createElement("iframe");
	    D.body.appendChild(f);
	    f.src = "data:" +  strMimeType   + "," + encodeURIComponent(strData);

	    setTimeout(function() {
	        D.body.removeChild(f);
	    }, 333);
	    return true;
	}

	$('#cardographtab').click(function(){
		$('.dropdown-button').html("EXPORT CARDOGRAPHS");
		$('.dropdown-button').attr("data-activates", "dropcardographs");
		$('.dropdown-button').dropdown();
	});

	$('#yearlytab').click(function(){
		$('.dropdown-button').html("EXPORT YEARLY PARAMETERS");
		$('.dropdown-button').attr("data-activates", "dropyearly");
		$('.dropdown-button').dropdown();
	});

	$('#monthlytab').click(function(){
		$('.dropdown-button').html("EXPORT MONTHLY PARAMETERS");
		$('.dropdown-button').attr("data-activates", "dropmonthly");
		$('.dropdown-button').dropdown();
	});

	$('.exportbutton').click(function () {
            var csv = $('.export-table').table2CSV({
                delivery: 'value',
                filename: 'device-usage.csv'
            });

            download(csv, $(this).attr("download") + ".csv", "text/csv");
        });
	$('.dropdown-button').dropdown();
	  $('.modal-trigger').leanModal({
	      dismissible: false, // Modal can be dismissed by clicking outside of the modal
	      opacity: .8, // Opacity of modal background
	      in_duration: 300, // Transition in duration
	      out_duration: 200, // Transition out duration
	    }
	  );
	  $('select').material_select();
	  Materialize.updateTextFields();
});

// DYNAMIC REMOVAL 


